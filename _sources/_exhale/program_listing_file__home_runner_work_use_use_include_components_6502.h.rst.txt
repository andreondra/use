
.. _program_listing_file__home_runner_work_use_use_include_components_6502.h:

Program Listing for File 6502.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_use_use_include_components_6502.h>` (``/home/runner/work/use/use/include/components/6502.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef USE_6502_H
   #define USE_6502_H
   
   #include <cstdint>
   #include <string>
   #include <functional>
   #include <map>
   #include "Component.h"
   #include "Types.h"
   
   class MOS6502 : public Component{
   protected:
       // ===========================================
       // CPU internals
       // ===========================================
       static constexpr uint16_t STACK_POSITION = 0x0100;
       static constexpr uint16_t VECTOR_NMI = 0xFFFA;
       static constexpr uint16_t VECTOR_RST = 0xFFFC;
       static constexpr uint16_t VECTOR_IRQ = 0xFFFE;
   
   
       typedef struct {
           char mnemonic[4]; // ASM mnemonic.
           uint8_t (MOS6502::*addrMode)(); // Pointer to the address mode function.
           uint8_t (MOS6502::*instrCode)(); // Pointer to the instruction code.
           uint8_t instrLen; // Instruction length in bytes.
           uint8_t cycles; // Machine cycles count.
       } instruction_t;
   
       using m = MOS6502;
       const instruction_t lookup[256] =
               {  //0                                1                                2                                3                                4                                5                                6                                7                                8                                9                                 A                               B                                C                                D                                E                                F
                       /*0*/{"BRK", &m::IMP, &m::BRK, 1, 7}, {"ORA", &m::IDX, &m::ORA, 2, 6}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"SLO", &m::IDX, &m::SLO, 2, 8}, {"NOP", &m::ZP0, &m::NOP, 2, 3}, {"ORA", &m::ZP0, &m::ORA, 2, 3}, {"ASL", &m::ZP0, &m::ASL, 2, 5}, {"SLO", &m::ZP0, &m::SLO, 2, 5}, {"PHP", &m::IMP, &m::PHP, 1, 3}, {"ORA", &m::IMM, &m::ORA, 2, 2}, {"ASL", &m::ACC, &m::ASL, 1, 2}, {"ANC", &m::IMM, &m::ANC, 2, 2}, {"NOP", &m::ABS, &m::NOP, 3, 4}, {"ORA", &m::ABS, &m::ORA, 3, 4}, {"ASL", &m::ABS, &m::ASL, 3, 6}, {"SLO", &m::ABS, &m::SLO, 3, 6},
                       /*1*/{"BPL", &m::REL, &m::BPL, 2, 2}, {"ORA", &m::IDY, &m::ORA, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"SLO", &m::IDY, &m::SLO, 2, 8}, {"NOP", &m::ZPX, &m::NOP, 2, 4}, {"ORA", &m::ZPX, &m::ORA, 2, 4}, {"ASL", &m::ZPX, &m::ASL, 2, 6}, {"SLO", &m::ZPX, &m::SLO, 2, 6}, {"CLC", &m::IMP, &m::CLC, 1, 2}, {"ORA", &m::ABY, &m::ORA, 3, 4}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"SLO", &m::ABY, &m::SLO, 3, 7}, {"NOP", &m::ABX, &m::NOP, 3, 4}, {"ORA", &m::ABX, &m::ORA, 3, 4}, {"ASL", &m::ABX, &m::ASL, 3, 7}, {"SLO", &m::ABX, &m::SLO, 3, 7},
                       /*2*/{"JSR", &m::ABS, &m::JSR, 3, 6}, {"AND", &m::IDX, &m::AND, 2, 6}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"RLA", &m::IDX, &m::RLA, 2, 8}, {"BIT", &m::ZP0, &m::BIT, 2, 3}, {"AND", &m::ZP0, &m::AND, 2, 3}, {"ROL", &m::ZP0, &m::ROL, 2, 5}, {"RLA", &m::ZP0, &m::RLA, 2, 5}, {"PLP", &m::IMP, &m::PLP, 1, 4}, {"AND", &m::IMM, &m::AND, 2, 2}, {"ROL", &m::ACC, &m::ROL, 1, 2}, {"ANC", &m::IMM, &m::ANC, 2, 2}, {"BIT", &m::ABS, &m::BIT, 3, 4}, {"AND", &m::ABS, &m::AND, 3, 4}, {"ROL", &m::ABS, &m::ROL, 3, 6}, {"RLA", &m::ABS, &m::RLA, 3, 6},
                       /*3*/{"BMI", &m::REL, &m::BMI, 2, 2}, {"AND", &m::IDY, &m::AND, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"RLA", &m::IDY, &m::RLA, 2, 8}, {"NOP", &m::ZPX, &m::NOP, 2, 4}, {"AND", &m::ZPX, &m::AND, 2, 4}, {"ROL", &m::ZPX, &m::ROL, 2, 6}, {"RLA", &m::ZPX, &m::RLA, 2, 6}, {"SEC", &m::IMP, &m::SEC, 1, 2}, {"AND", &m::ABY, &m::AND, 3, 4}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"RLA", &m::ABY, &m::RLA, 3, 7}, {"NOP", &m::ABX, &m::NOP, 3, 4}, {"AND", &m::ABX, &m::AND, 3, 4}, {"ROL", &m::ABX, &m::ROL, 3, 7}, {"RLA", &m::ABX, &m::RLA, 3, 7},
                       /*4*/{"RTI", &m::IMP, &m::RTI, 1, 6}, {"EOR", &m::IDX, &m::EOR, 2, 6}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"SRE", &m::IDX, &m::SRE, 2, 8}, {"NOP", &m::ZP0, &m::NOP, 2, 3}, {"EOR", &m::ZP0, &m::EOR, 2, 3}, {"LSR", &m::ZP0, &m::LSR, 2, 5}, {"SRE", &m::ZP0, &m::SRE, 2, 5}, {"PHA", &m::IMP, &m::PHA, 1, 3}, {"EOR", &m::IMM, &m::EOR, 2, 2}, {"LSR", &m::ACC, &m::LSR, 1, 2}, {"ALR", &m::IMM, &m::ALR, 2, 2}, {"JMP", &m::ABS, &m::JMP, 3, 3}, {"EOR", &m::ABS, &m::EOR, 3, 4}, {"LSR", &m::ABS, &m::LSR, 3, 6}, {"SRE", &m::ABS, &m::SRE, 3, 6},
                       /*5*/{"BVC", &m::REL, &m::BVC, 2, 2}, {"EOR", &m::IDY, &m::EOR, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"SRE", &m::IDY, &m::SRE, 2, 8}, {"NOP", &m::ZPX, &m::NOP, 2, 4}, {"EOR", &m::ZPX, &m::EOR, 2, 4}, {"LSR", &m::ZPX, &m::LSR, 2, 6}, {"SRE", &m::ZPX, &m::SRE, 2, 6}, {"CLI", &m::IMP, &m::CLI, 1, 2}, {"EOR", &m::ABY, &m::EOR, 3, 4}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"SRE", &m::ABY, &m::SRE, 3, 7}, {"NOP", &m::ABX, &m::NOP, 3, 4}, {"EOR", &m::ABX, &m::EOR, 3, 4}, {"LSR", &m::ABX, &m::LSR, 3, 7}, {"SRE", &m::ABX, &m::SRE, 3, 7},
                       /*6*/{"RTS", &m::IMP, &m::RTS, 1, 6}, {"ADC", &m::IDX, &m::ADC, 2, 6}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"RRA", &m::IDX, &m::RRA, 2, 8}, {"NOP", &m::ZP0, &m::NOP, 2, 3}, {"ADC", &m::ZP0, &m::ADC, 2, 3}, {"ROR", &m::ZP0, &m::ROR, 2, 5}, {"RRA", &m::ZP0, &m::RRA, 2, 5}, {"PLA", &m::IMP, &m::PLA, 1, 4}, {"ADC", &m::IMM, &m::ADC, 2, 2}, {"ROR", &m::ACC, &m::ROR, 1, 2}, {"ARR", &m::IMM, &m::ARR, 2, 2}, {"JMP", &m::ID0, &m::JMP, 3, 5}, {"ADC", &m::ABS, &m::ADC, 3, 4}, {"ROR", &m::ABS, &m::ROR, 3, 6}, {"RRA", &m::ABS, &m::RRA, 3, 6},
                       /*7*/{"BVS", &m::REL, &m::BVS, 2, 2}, {"ADC", &m::IDY, &m::ADC, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"RRA", &m::IDY, &m::RRA, 2, 8}, {"NOP", &m::ZPX, &m::NOP, 2, 4}, {"ADC", &m::ZPX, &m::ADC, 2, 4}, {"ROR", &m::ZPX, &m::ROR, 2, 6}, {"RRA", &m::ZPX, &m::RRA, 2, 6}, {"SEI", &m::IMP, &m::SEI, 1, 2}, {"ADC", &m::ABY, &m::ADC, 3, 4}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"RRA", &m::ABY, &m::RRA, 3, 7}, {"NOP", &m::ABX, &m::NOP, 3, 4}, {"ADC", &m::ABX, &m::ADC, 3, 4}, {"ROR", &m::ABX, &m::ROR, 3, 7}, {"RRA", &m::ABX, &m::RRA, 3, 7},
                       /*8*/{"NOP", &m::IMM, &m::NOP, 2, 2}, {"STA", &m::IDX, &m::STA, 2, 6}, {"NOP", &m::IMM, &m::NOP, 2, 2}, {"SAX", &m::IDX, &m::SAX, 2, 6}, {"STY", &m::ZP0, &m::STY, 2, 3}, {"STA", &m::ZP0, &m::STA, 2, 3}, {"STX", &m::ZP0, &m::STX, 2, 3}, {"SAX", &m::ZP0, &m::SAX, 2, 3}, {"DEY", &m::IMP, &m::DEY, 1, 2}, {"NOP", &m::IMM, &m::NOP, 2, 2}, {"TXA", &m::IMP, &m::TXA, 1, 2}, {"ANE", &m::IMM, &m::ANE, 2, 2}, {"STY", &m::ABS, &m::STY, 3, 4}, {"STA", &m::ABS, &m::STA, 3, 4}, {"STX", &m::ABS, &m::STX, 3, 4}, {"SAX", &m::ABS, &m::SAX, 3, 4},
                       /*9*/{"BCC", &m::REL, &m::BCC, 2, 2}, {"STA", &m::IDY, &m::STA, 2, 6}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"SHA", &m::IDY, &m::SHA, 2, 6}, {"STY", &m::ZPX, &m::STY, 2, 4}, {"STA", &m::ZPX, &m::STA, 2, 4}, {"STX", &m::ZPY, &m::STX, 2, 4}, {"SAX", &m::ZPY, &m::SAX, 2, 4}, {"TYA", &m::IMP, &m::TYA, 1, 2}, {"STA", &m::ABY, &m::STA, 3, 5}, {"TXS", &m::IMP, &m::TXS, 1, 2}, {"TAS", &m::ABY, &m::TAS, 3, 5}, {"SHY", &m::ABX, &m::SHY, 3, 5}, {"STA", &m::ABX, &m::STA, 3, 5}, {"SHX", &m::ABY, &m::SHX, 3, 5}, {"SHA", &m::ABY, &m::SHA, 3, 5},
                       /*A*/{"LDY", &m::IMM, &m::LDY, 2, 2}, {"LDA", &m::IDX, &m::LDA, 2, 6}, {"LDX", &m::IMM, &m::LDX, 2, 2}, {"LAX", &m::IDX, &m::LAX, 2, 6}, {"LDY", &m::ZP0, &m::LDY, 2, 3}, {"LDA", &m::ZP0, &m::LDA, 2, 3}, {"LDX", &m::ZP0, &m::LDX, 2, 3}, {"LAX", &m::ZP0, &m::LAX, 2, 3}, {"TAY", &m::IMP, &m::TAY, 1, 2}, {"LDA", &m::IMM, &m::LDA, 2, 2}, {"TAX", &m::IMP, &m::TAX, 1, 2}, {"LXA", &m::IMM, &m::LXA, 2, 2}, {"LDY", &m::ABS, &m::LDY, 3, 4}, {"LDA", &m::ABS, &m::LDA, 3, 4}, {"LDX", &m::ABS, &m::LDX, 3, 4}, {"LAX", &m::ABS, &m::LAX, 3, 4},
                       /*B*/{"BCS", &m::REL, &m::BCS, 2, 2}, {"LDA", &m::IDY, &m::LDA, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"LAX", &m::IDY, &m::LAX, 2, 5}, {"LDY", &m::ZPX, &m::LDY, 2, 4}, {"LDA", &m::ZPX, &m::LDA, 2, 4}, {"LDX", &m::ZPY, &m::LDX, 2, 4}, {"LAX", &m::ZPY, &m::LAX, 2, 4}, {"CLV", &m::IMP, &m::CLV, 1, 2}, {"LDA", &m::ABY, &m::LDA, 3, 4}, {"TSX", &m::IMP, &m::TSX, 1, 2}, {"LAS", &m::ABY, &m::LAS, 3, 4}, {"LDY", &m::ABX, &m::LDY, 3, 4}, {"LDA", &m::ABX, &m::LDA, 3, 4}, {"LDX", &m::ABY, &m::LDX, 3, 4}, {"LAX", &m::ABY, &m::LAX, 3, 4},
                       /*C*/{"CPY", &m::IMM, &m::CPY, 2, 2}, {"CMP", &m::IDX, &m::CMP, 2, 6}, {"NOP", &m::IMM, &m::NOP, 2, 2}, {"DCP", &m::IDX, &m::DCP, 2, 8}, {"CPY", &m::ZP0, &m::CPY, 2, 3}, {"CMP", &m::ZP0, &m::CMP, 2, 3}, {"DEC", &m::ZP0, &m::DEC, 2, 5}, {"DCP", &m::ZP0, &m::DCP, 2, 5}, {"INY", &m::IMP, &m::INY, 1, 2}, {"CMP", &m::IMM, &m::CMP, 2, 2}, {"DEX", &m::IMP, &m::DEX, 1, 2}, {"SBX", &m::IMM, &m::SBX, 2, 2}, {"CPY", &m::ABS, &m::CPY, 3, 4}, {"CMP", &m::ABS, &m::CMP, 3, 4}, {"DEC", &m::ABS, &m::DEC, 3, 6}, {"DCP", &m::ABS, &m::DCP, 3, 6},
                       /*D*/{"BNE", &m::REL, &m::BNE, 2, 2}, {"CMP", &m::IDY, &m::CMP, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"DCP", &m::IDY, &m::DCP, 2, 8}, {"NOP", &m::ZPX, &m::NOP, 2, 4}, {"CMP", &m::ZPX, &m::CMP, 2, 4}, {"DEC", &m::ZPX, &m::DEC, 2, 6}, {"DCP", &m::ZPX, &m::DCP, 2, 6}, {"CLD", &m::IMP, &m::CLD, 1, 2}, {"CMP", &m::ABY, &m::CMP, 3, 4}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"DCP", &m::ABY, &m::DCP, 3, 7}, {"NOP", &m::ABX, &m::NOP, 3, 4}, {"CMP", &m::ABX, &m::CMP, 3, 4}, {"DEC", &m::ABX, &m::DEC, 3, 7}, {"DCP", &m::ABX, &m::DCP, 3, 7},
                       /*E*/{"CPX", &m::IMM, &m::CPX, 2, 2}, {"SBC", &m::IDX, &m::SBC, 2, 6}, {"NOP", &m::IMM, &m::NOP, 2, 2}, {"ISB", &m::IDX, &m::ISB, 2, 8}, {"CPX", &m::ZP0, &m::CPX, 2, 3}, {"SBC", &m::ZP0, &m::SBC, 2, 3}, {"INC", &m::ZP0, &m::INC, 2, 5}, {"ISB", &m::ZP0, &m::ISB, 2, 5}, {"INX", &m::IMP, &m::INX, 1, 2}, {"SBC", &m::IMM, &m::SBC, 2, 2}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"SBC", &m::IMM, &m::SBC, 2, 2}, {"CPX", &m::ABS, &m::CPX, 3, 4}, {"SBC", &m::ABS, &m::SBC, 3, 4}, {"INC", &m::ABS, &m::INC, 3, 6}, {"ISB", &m::ABS, &m::ISB, 3, 6},
                       /*F*/{"BEQ", &m::REL, &m::BEQ, 2, 2}, {"SBC", &m::IDY, &m::SBC, 2, 5}, {"JAM", &m::IMP, &m::JAM, 1, 1}, {"ISB", &m::IDY, &m::ISB, 2, 8}, {"NOP", &m::ZPX, &m::NOP, 2, 4}, {"SBC", &m::ZPX, &m::SBC, 2, 4}, {"INC", &m::ZPX, &m::INC, 2, 6}, {"ISB", &m::ZPX, &m::ISB, 2, 6}, {"SED", &m::IMP, &m::SED, 1, 2}, {"SBC", &m::ABY, &m::SBC, 3, 4}, {"NOP", &m::IMP, &m::NOP, 1, 2}, {"ISB", &m::ABY, &m::ISB, 3, 7}, {"NOP", &m::ABX, &m::NOP, 3, 4}, {"SBC", &m::ABX, &m::SBC, 3, 4}, {"INC", &m::ABX, &m::INC, 3, 7}, {"ISB", &m::ABX, &m::ISB, 3, 7}
               };
   
       struct status_flags_t {
           bool c = false;
           bool z = false;
           bool i = false;
           bool d = false;
           bool b = false;
           bool x = false;
           bool v = false;
           bool n = false;
       };
   
       struct {
           uint8_t x = 0x00;           //Index register X.
           uint8_t y = 0x00;           //Index register Y.
           status_flags_t status{};    //Status register.
           uint8_t acc = 0x00;         //Accumulator.
           uint8_t sp = 0x00;          //Stack pointer. The stack is a descending type.
           uint16_t pc = 0x0000;       //Program counter.
       } m_registers;
   
       // ===========================================
       // Emulation helper variables
       // ===========================================
       uint16_t m_addrAbs = false;
       uint16_t m_addrRel = false;
       uint8_t m_cycles   = 0;
       unsigned long long m_cycleCount = 0;
       bool m_accOperation = false;
   
       enum class nextMode_t {
           INSTRUCTION,
           IRQ_ISR,
           NMI_ISR
       } m_next = nextMode_t::INSTRUCTION;
   
       bool m_nmi = false;
       bool m_nmiPending = false;
       bool m_irq = false;
       bool m_irqPending = false;
       bool m_oldInterruptMask = false;
   
       instruction_t m_currentInstruction;
       uint8_t m_currentOpcode = 0xEA;
   
       // ===========================================
       // Emulator internal functions
       // ===========================================
       std::string getCurrentAddressString();
       void irqHandler();
       void nmiHandler();
       void hardReset();
   
       // ===========================================
       // I/O
       // ===========================================
       DataPort m_mainBus;
   
       void IRQ(bool active);
       void NMI();
       void CLK();
   
       // ===========================================
       // Pseudoinstructions
       // ===========================================
       void branch(bool condition);
   
       // ===========================================
       // Addressing modes
       // ===========================================
       // Non-indexed, non memory.
       uint8_t ACC(); // Accumulator is the target.
       uint8_t IMM(); // Data is the next byte.
       uint8_t IMP(); // Instruction implies target.
   
       // Non-indexed memory access.
       uint8_t ABS(); // Absoulute mode.
       uint8_t ZP0(); // Zero-Page mode (first 256 B mapping).
       uint8_t REL(); // Relative mode (branching).
       uint8_t ID0(); // Indirect mode (like a pointer).
   
       // Indexed memory access.
       uint8_t ABX(); // Absolute indexed + offset in X register.
       uint8_t ABY(); // Absolute indexed + offset in Y register.
       uint8_t ZPX(); // Like ABX but limited to first 256 B.
       uint8_t ZPY(); // Like ABY but limited to first 256 B.
       uint8_t IDX(); // (Indirect,X).
       uint8_t IDY(); // (Indirect),Y.
       // ===========================================
       // Instructions modes
       // ===========================================
       uint8_t ADC(); 
       uint8_t AND(); 
       uint8_t ASL(); 
       uint8_t BCC(); 
       uint8_t BCS(); 
       uint8_t BEQ(); 
       uint8_t BIT(); 
       uint8_t BMI(); 
       uint8_t BNE(); 
       uint8_t BPL(); 
       uint8_t BRK(); 
       uint8_t BVC(); 
       uint8_t BVS(); 
       uint8_t CLC(); 
       uint8_t CLD(); 
       uint8_t CLI(); 
       uint8_t CLV(); 
       uint8_t CMP(); 
       uint8_t CPX(); 
       uint8_t CPY(); 
       uint8_t DEC(); 
       uint8_t DEX(); 
       uint8_t DEY(); 
       uint8_t EOR(); 
       uint8_t INC(); 
       uint8_t INX(); 
       uint8_t INY(); 
       uint8_t JMP(); 
       uint8_t JSR(); 
       uint8_t LDA(); 
       uint8_t LDX(); 
       uint8_t LDY(); 
       uint8_t LSR(); 
       uint8_t NOP(); 
       uint8_t ORA(); 
       uint8_t PHA(); 
       uint8_t PHP(); 
       uint8_t PLA(); 
       uint8_t PLP(); 
       uint8_t ROL(); 
       uint8_t ROR(); 
       uint8_t RTI(); 
       uint8_t RTS(); 
       uint8_t SBC(); 
       uint8_t SEC(); 
       uint8_t SED(); 
       uint8_t SEI(); 
       uint8_t STA(); 
       uint8_t STX(); 
       uint8_t STY(); 
       uint8_t TAX(); 
       uint8_t TAY(); 
       uint8_t TSX(); 
       uint8_t TXA(); 
       uint8_t TXS(); 
       uint8_t TYA(); 
   
       // Illegal instructions.
       uint8_t ALR(); 
       uint8_t ANC(); 
       uint8_t ANE(); 
       uint8_t ARR(); 
       uint8_t DCP(); 
       uint8_t ISB(); 
       uint8_t LAS(); 
       uint8_t LAX(); 
       uint8_t LXA(); 
       uint8_t RLA(); 
       uint8_t RRA(); 
       uint8_t SAX(); 
       uint8_t SBX(); 
       uint8_t SHA(); 
       uint8_t SHX(); 
       uint8_t SHY(); 
       uint8_t SLO(); 
       uint8_t SRE(); 
       uint8_t TAS(); 
       uint8_t JAM(); 
   
   public:
   
       explicit MOS6502();
       ~MOS6502() override;
   
       void init() override;
   
       std::vector<EmulatorWindow> getGUIs() override;
   
       void softReset();
   
       [[nodiscard]] bool instrFinished() const;
   };
   
   #endif //USE_6502_H
